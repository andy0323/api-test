#!/usr/bin/env node
require('shelljs/global');
var fs = require('fs');
var jsonreader = require('../src/jsonreader');

REQUEST_FOLDER_NAME = "/request"

var fs      = require('fs'),
	request = require('../src/apiRequest.js'),
	program = require('commander');
	version = require('../package.json').version,
	doc_generate     = require('../src/doc_generate');


var files = find('-R', process.cwd()).filter(function(file) { return file.match(/\.req$/); });
var reqCount = files.length;
var resCount = 0;
var mdWriteCount = 0;

program
	.version(version)
    	.usage("api-test .")
    	.option('-v, --verbose', '打印详细日志')
 	.parse(process.argv);


function main(){
	parse_request()
}

main();

// __dirname

function log(t){
	echo("[API-TEST LOG]" + t)
}


function parse_request(){
	var request_dir = process.cwd() + REQUEST_FOLDER_NAME;
	log("request_dir = " + request_dir);
	
	if (test('-d', request_dir) == false) {
		mkdir('-p', request_dir);
		log('request folder is empty. you need put some.req in request folder');
		return;
	};
	
	parse_with_request_dir(request_dir);	
}


// -- private
function parse_with_request_dir(path){
  var dirList = fs.readdirSync(path);
 
  dirList.forEach(function(item){
    if(fs.statSync(path + '/' + item).isFile()){
			var req_file = path + '/' + item;
			request_processing_with_file(req_file)
    }
  });
 
  // 子目录，暂不处理，现在是广度优先。
  dirList.forEach(function(item){
    if(fs.statSync(path + '/' + item).isDirectory()){
      walk(path + '/' + item);
    }
  });
}

function request_processing_with_file(req_file){
	log("当前正在处理" + req_file);
	var obj = "";
	
	jsonreader(req_file, function(obj){
		console.log("cb_succ")
		start_with_req_obj(obj);
	}, function(){
		console.log("cb_fail")
	});
}

function start_with_req_obj(req_obj){
	// 此处处理实际请求
	request.task(req_obj, requestCompleteCallback);
}

/**
 * 请求完成回调
 */
function requestCompleteCallback(jsonObj, resErr, httpResponse, resBody) {

	jsonObj.response = {
		result : resBody,
		err    : resErr,
		status : (resErr==null) ? true : false
	};

	var jsonString = JSON.stringify(jsonObj, null, 4);

	writeHandler(jsonObj, jsonString)
}

/**
 * 写入数据
 */
function writeHandler(jsonObj, data) {
	var resName = jsonObj.file_name.replace(/.req/, '.res');
	var resPath = 'response/' + resName;

	fs.writeFile(resPath, data, 'utf-8', function(err){
	   
	    if(err){
	        return console.log(err);
	    }
	});	

	resCount++;
	if (resCount == reqCount) {
		createMarkdown();
	};
}

function createMarkdown() {
	doc_generate(process.cwd(), function(t) {

		fs.appendFile('api.md', t, 'utf-8', function(err) {

			if (++mdWriteCount == reqCount) {
				var pwd_dir =  process.cwd();
				var api_md_file = pwd_dir + '/' + GENERATE_MARKDOWN_FILE_NAME;
				_to_html(api_md_file);
			};

			if (err) {
				return;
			};
		});

	}, function() {

	});
}


// setTimeout(function(){
// 	var pwd_dir =  process.cwd();
// 	var api_md_file = pwd_dir + '/' + GENERATE_MARKDOWN_FILE_NAME;
// 	_to_html(api_md_file);
	
// },5000);


function _to_html(source_file){
	// todo
	var source_file = source_file; //'/Users/sang/workspace/github/api-test/design.md';

	//函数可以返回当前正在执行的项目路径
	var pwd = process.cwd()  

	var source_file_name = source_file;
	var file_name = source_file_name.split('/').pop();;
	var _file_name = file_name.split('.')[0];

	var dest_file_path = pwd + '/preview/' + _file_name + '.html';

	console.log('pwd=' + pwd);
	console.log('source_file_name=' + source_file_name);
	console.log('dest_file_path=' + dest_file_path);

	var is_open = true;
	var markd_config = {
		debug: false
	}

	require('i5ting_toc')(pwd, source_file_name, dest_file_path, is_open, markd_config);	
}
