#!/usr/bin/env node
require('shelljs/global');
var Promise = require("bluebird");
var fs = require('fs');
var console = require('logge');

var jsonreader = require('../src/jsonreader');


console.debug = false;
console.set_log_request(false);


REQUEST_FOLDER_NAME = "/request"
RESPONSE_FOLDER_NAME = "/response"
GENERATE_MARKDOWN_FILE_NAME = "api.md"

var fs      = require('fs'),
	request = require('../src/apiRequest.js'),
	program = require('commander');
	version = require('../package.json').version,
	doc_generate     = require('../src/doc_generate');


var files = find('-R', process.cwd()).filter(function(file) { return file.match(/\.req$/); });
var reqCount = files.length;
var resCount = 0;
var mdWriteCount = 0;

program
	.version(version)
    	.usage("api-test .")
    	.option('-v, --verbose', '打印详细日志')
 	.parse(process.argv);


var filelist = [];
function main(){
	parse_request()
}

main();

// __dirname

function log(t){
	// echo("[API-TEST LOG]" + t)
}

function parse_request(){
	var request_dir = process.cwd() + REQUEST_FOLDER_NAME;
	var api_md_file = process.cwd() + '/' + GENERATE_MARKDOWN_FILE_NAME;
	var response_dir = process.cwd() + RESPONSE_FOLDER_NAME;
	
	rm("-rf",response_dir+'/*.res');
	log("request_dir = " + request_dir);
	
	if (test('-d', request_dir) == false) {
		mkdir('-p', request_dir);
		log('request folder is empty. you need put some.req in request folder');
		return;
	};
	
	if (test('-f', api_md_file) == false) {
		mkdir('-p', request_dir);
		log('当前目录没有api.md,不需要处理。');
		return;
	}else{
		rm("-rf",api_md_file);
		log('当前目录有api.md,已经清除了。');
	}
	
	_parse_with_request_dir(request_dir);	
	console.log(filelist);
	
	// filelist = ["/Users/sang/workspace/github/api-test/play/request/get.req"];
	Promise.all(filelist).map(function(req_file) {
    console.log("单一文件处理");
		return request_processing_with_file(req_file);
	}).then(function(req_file) {
		console.log("所有文件都处理都已经完成");
		createMarkdown();
	});
}


function request_processing_with_file(req_file){
	log("当前正在处理" + req_file);
	var obj = "";

	return jsonreader(req_file).then(function (obj) {
		obj.file_name = req_file.split('/').pop();;
		obj.file_path = req_file;
		obj.pwd = process.cwd();
		console.log(obj);
		return request.task(obj, requestCompleteCallback)
	}).then(function(jsonObj, jsonString){
		log("writeHandler");
		return writeHandler(jsonObj, jsonString);
	}).then(function(){
		log("...11");
	}).catch(SyntaxError, function (e) {
	    console.log("file contains invalid json");
	}).error(function (e) {
	    console.log("unable to read file, because: ", e.message);
	});
}

/**
 * only for test promise, please not use in product
 */ 
function sleep(seconds) {
  this.date = Math.round(new Date().getTime()/1000);
  while(1) {
    if(Math.round(new Date().getTime()/1000) - this.date >= seconds) break;
  }
  return true;
}

function decode_url(url){
	url = url.replace(/__/g,':');
	return url;
}

function get_url(jsonObj){
	var url = jsonObj['url'];
	return decode_url(url);
}

/**
 * 请求完成回调
 */
function requestCompleteCallback(jsonObj, resErr, httpResponse, resBody) {
	jsonObj.response = {
		result : resBody,
		err    : resErr,
		status : (resErr==null) ? true : false
	};

	jsonObj.url = get_url(jsonObj);
	var jsonString = JSON.stringify(jsonObj, null, 4);

	// sleep(5);	
	return writeHandler(jsonObj, jsonString)
}

/**
 * 写入数据
 */
function writeHandler(jsonObj, data) {
	if(jsonObj){
		log("writeHandler jsonObj exist,准备写入.res文件");
		var resName = jsonObj.file_name.replace(/.req/, '.res');
		var resPath = 'response/' + resName;

		fs.writeFileSync(resPath, data, 'utf-8', function(err){
		    if(err){
		        return log(err);
		    }
		});	

		return Promise.resolve(jsonObj, data);
	}else{
		log("writeHandler jsonObj nil");
		return Promise.resolve(jsonObj, data);
	}
}

function createMarkdown() {
	doc_generate(process.cwd(), function(t) {

	}, function() {

	});
}

// -- private
function _parse_with_request_dir(path){
  var dirList = fs.readdirSync(path);
 
  dirList.forEach(function(item){
    if(fs.statSync(path + '/' + item).isFile()){
			var req_file = path + '/' + item;
			// request_processing_with_file(req_file)
			filelist.push(req_file);
    }
  });
 
  // 子目录，暂不处理，现在是广度优先。
  dirList.forEach(function(item){
    if(fs.statSync(path + '/' + item).isDirectory()){
      _parse_with_request_dir(path + '/' + item);
    }
  });
}