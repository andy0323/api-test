#!/usr/bin/env node
require('shelljs/global');
var Promise = require("bluebird");
var fs = require('fs');
var jsonreader = require('../src/jsonreader');

REQUEST_FOLDER_NAME = "/request"

var fs      = require('fs'),
	request = require('../src/apiRequest.js'),
	program = require('commander');
	version = require('../package.json').version,
	doc_generate     = require('../src/doc_generate');


var files = find('-R', process.cwd()).filter(function(file) { return file.match(/\.req$/); });
var reqCount = files.length;
var resCount = 0;
var mdWriteCount = 0;

program
	.version(version)
    	.usage("api-test .")
    	.option('-v, --verbose', '打印详细日志')
 	.parse(process.argv);


var filelist = [];
function main(){
	parse_request()
}



main();

// __dirname

function log(t){
	echo("[API-TEST LOG]" + t)
}


function parse_request(){
	var request_dir = process.cwd() + REQUEST_FOLDER_NAME;
	log("request_dir = " + request_dir);
	
	if (test('-d', request_dir) == false) {
		mkdir('-p', request_dir);
		log('request folder is empty. you need put some.req in request folder');
		return;
	};
	
	parse_with_request_dir(request_dir);	
	console.log(filelist);
	
	// filelist = ["/Users/sang/workspace/github/api-test/play/request/get.req"];
	
	Promise.all(filelist).map(function(req_file) {
    console.log("单一文件处理");
		return request_processing_with_file(req_file);
	}).then(function(req_file) {
		console.log("所有文件都处理都已经完成");
		createMarkdown();
	});
}


// -- private
function parse_with_request_dir(path){
  var dirList = fs.readdirSync(path);
 
  dirList.forEach(function(item){
    if(fs.statSync(path + '/' + item).isFile()){
			var req_file = path + '/' + item;
			// request_processing_with_file(req_file)
			filelist.push(req_file);
    }
  });
 
  // 子目录，暂不处理，现在是广度优先。
  dirList.forEach(function(item){
    if(fs.statSync(path + '/' + item).isDirectory()){
      walk(path + '/' + item);
    }
  });
}

function request_processing_with_file(req_file){
	log("当前正在处理" + req_file);
	var obj = "";

	return jsonreader(req_file).then(function (obj) {
		obj.file_name = req_file.split('/').pop();;
		obj.file_path = req_file;
		return request.task(obj, requestCompleteCallback)
	}).then(function(jsonObj, jsonString){
		console.log("...");
		return writeHandler(jsonObj, jsonString);
	}).then(function(){
		console.log("...11");
	}).catch(SyntaxError, function (e) {
	    console.error("file contains invalid json");
	}).error(function (e) {
	    console.error("unable to read file, because: ", e.message);
	});
}

// function start_with_req_obj(req_obj){
// 	// 此处处理实际请求
// 	request.task(req_obj, requestCompleteCallback);
// }

function sleep(seconds) {
  this.date = Math.round(new Date().getTime()/1000);
  while(1) {
    if(Math.round(new Date().getTime()/1000) - this.date >= seconds) break;
  }
  return true;
}

/**
 * 请求完成回调
 */
function requestCompleteCallback(jsonObj, resErr, httpResponse, resBody) {

	jsonObj.response = {
		result : resBody,
		err    : resErr,
		status : (resErr==null) ? true : false
	};

	var jsonString = JSON.stringify(jsonObj, null, 4);

	
	// sleep(5);
	
	// return Promise.resolve(jsonObj, jsonString);

	return writeHandler(jsonObj, jsonString)
}

/**
 * 写入数据
 */
function writeHandler(jsonObj, data) {
	if(jsonObj){
		console.log("writeHandler jsonObj exist,准备写入.res文件");
		// return Promise.resolve(jsonObj,data);
		var resName = jsonObj.file_name.replace(/.req/, '.res');
		var resPath = 'response/' + resName;

		fs.writeFileSync(resPath, data, 'utf-8', function(err){
		    if(err){
		        return console.log(err);
		    }
		});	

		// if (++resCount == reqCount) {
		// 	createMarkdown();
		// };
	

		return Promise.resolve(jsonObj, data);
	}else{
		console.log("writeHandler jsonObj nil");
		return Promise.resolve(jsonObj, data);
	}
}

function createMarkdown() {
	doc_generate(process.cwd(), function(t) {

	}, function() {

	});
}


// setTimeout(function(){
// 	var pwd_dir =  process.cwd();
// 	var api_md_file = pwd_dir + '/' + GENERATE_MARKDOWN_FILE_NAME;
// 	_to_html(api_md_file);
	
// },5000);
